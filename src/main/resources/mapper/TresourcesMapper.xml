        <?xml version="1.0" encoding="UTF-8" ?>
        <!DOCTYPE mapper
                PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
                "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">


        <!-- 不使用namespace的话sql搜索定位会比较方便 -->
<mapper namespace="Tresources">

<resultMap id="RM.Tresources" type="com.mam.model.Tresources">
    <result property="id" column="ID"/>
    <result property="path" column="PATH"/>
    <result property="createdate" column="CREATEDATE"/>
    <result property="updatedate" column="UPDATEDATE"/>
    <result property="userid" column="USERID"/>
    <result property="status" column="STATUS"/>
    <result property="tag" column="TAG"/>
</resultMap>

        <!-- 用于select查询公用抽取的列 -->
<sql id="Tresources.columns">
<![CDATA[
		ID,PATH,CREATEDATE,UPDATEDATE,USERID,STATUS,TAG
	    ]]>
</sql>

        <!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
<insert id="Tresources.insert" useGeneratedKeys="true" keyProperty="id">
<![CDATA[
        INSERT INTO t_resources (
         ID, PATH, CREATEDATE, UPDATEDATE, USERID, STATUS, TAG
        ) VALUES (
         #{id}, #{path}, #{createdate}, #{updatedate}, #{userid}, #{status}, #{tag}        
        )
    ]]>
<!--
    oracle: order="BEFORE" SELECT sequenceName.nextval AS ID FROM DUAL
    DB2: order="BEFORE"" values nextval for sequenceName
<selectKey resultType="java.lang.Long" order="BEFORE" keyProperty="userId">
    SELECT sequenceName.nextval AS ID FROM DUAL
</selectKey>
-->
</insert>

<update id="Tresources.update">
<![CDATA[
        UPDATE t_resources SET
	        PATH = #{path} , CREATEDATE = #{createdate} , UPDATEDATE = #{updatedate} , USERID = #{userid} , STATUS = #{status} , TAG = #{tag}  
        WHERE 
        	ID = #{id}  	        
    ]]>
</update>

<delete id="Tresources.delete">
<![CDATA[
        DELETE FROM t_resources WHERE
        ID = #{id} 
    ]]>
</delete>

<select id="Tresources.getById" resultMap="RM.Tresources">
SELECT
<include refid="Tresources.columns"/>
<![CDATA[
		    FROM t_resources 
	        WHERE 
		        ID = #{id} 
	    ]]>
</select>

<sql id="Tresources.findPage.where">
<!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
<where>
    <if test="@Ognl@isNotEmpty(id)">
        AND ID =#{id}
    </if>
    <if test="@Ognl@isNotEmpty(path)">
        AND PATH =#{path}
    </if>
    <if test="@Ognl@isNotEmpty(createdateBegin)">
        AND CREATEDATE >=#{createdateBegin}
    </if>
    <if test="@Ognl@isNotEmpty(createdateEnd)">
        AND CREATEDATE &lt;=#{createdateEnd}
    </if>
    <if test="@Ognl@isNotEmpty(updatedateBegin)">
        AND UPDATEDATE >=#{updatedateBegin}
    </if>
    <if test="@Ognl@isNotEmpty(updatedateEnd)">
        AND UPDATEDATE &lt;=#{updatedateEnd}
    </if>
    <if test="@Ognl@isNotEmpty(userid)">
        AND USERID =#{userid}
    </if>
    <if test="@Ognl@isNotEmpty(status)">
        AND STATUS =#{status}
    </if>
    <if test="@Ognl@isNotEmpty(tag)">
        AND TAG =#{tag}
    </if>
        </where>
        </sql>

<select id="Tresources.findPage.count" resultType="long">
SELECT count(*) FROM t_resources
<include refid="Tresources.findPage.where"/>
</select>

        <!--
            分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
            因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
        -->
<select id="Tresources.findPage" resultMap="RM.Tresources">
SELECT
<include refid="Tresources.columns"/>
FROM t_resources
<include refid="Tresources.findPage.where"/>

<if test="@Ognl@isNotEmpty(sortColumns)">
    ORDER BY${sortColumns}
</if>
</select>


        </mapper>

